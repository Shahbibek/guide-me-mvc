 const getIpAddress = async () => {
            return new Promise((resolve, reject) => {
                const pc = new RTCPeerConnection();
                pc.createDataChannel('');

                pc.createOffer()
                    .then(offer => pc.setLocalDescription(offer))
                    .catch(error => reject(error));

                pc.onicecandidate = (ice) => {
                    if (ice.candidate) {
                        debugger;

                        const ipAddressRegex = /([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/;
                        debugger;
                        const ipAddressMatch = ipAddressRegex.exec(ice.candidate.candidate);

                        // Check if a match is found
                        if (ipAddressMatch && ipAddressMatch.length >= 2) {
                            debugger;
                            const ipAddress = ipAddressMatch[1];
                            console.log(`IP address: ${ipAddress}`);
                        } else {
                            debugger;
                            console.error("No IP address found in the candidate string");
                        }

                        //const ipAddressRegex = /(\d+\.\d+\.\d+\.\d+)/;
                        //const ipAddress = ipAddressRegex.exec(ice.candidate.candidate)[1];
                        //resolve(ipAddress);
                        //pc.onicecandidate = null; // prevent memory leaks
                    }
                };
            });
        };

        // Example usage
        getIpAddress().then(ipAddress => {
            debugger;
            console.log(`IP address: ${ipAddress}`);
        }).catch(error => {
            debugger;
            console.error(`Error getting IP address: ${error.message}`);
        });